version: 2.1

executors:
  go-executor:
    docker:
      - image: cimg/go:1.21
      - image: postgres:15
        environment:
          POSTGRES_USER: items_user
          POSTGRES_PASSWORD: items_pass
          POSTGRES_DB: items_db
    working_directory: ~/repo

jobs:
  test:
    executor: go-executor
    environment:
      DB_MAX_RETRIES: 5
      DB_RETRY_DELAY: 2
    steps:
      - checkout
      - run:
          name: Install Postgres Client
          command: |
            sudo apt-get update && sudo apt-get install -y postgresql-client
      - run:
          name: Wait for Postgres
          command: |
            for i in `seq 1 10`; do
              nc -z localhost 5432 && echo "Postgres is up" && exit 0
              echo "Waiting for Postgres..."
              sleep 2
            done
            echo "Postgres failed to start" && exit 1
      - run:
          name: Run DB Migrations
          command: |
            psql -h localhost -U items_user -d items_db -f migrations/0001_create_items.sql
      - run:
          name: Install gotestsum
          command: go install gotest.tools/gotestsum@latest
      - run:
          name: Run Tests
          command: |
            mkdir -p test-results
            $(go env GOPATH)/bin/gotestsum --junitfile test-results/unit-tests.xml ./...
      - store_test_results:
          path: test-results
      - store_artifacts:
          path: test-results

  build:
    docker:
      - image: cimg/base:stable
    working_directory: ~/repo
    steps:
      - checkout
      - setup_remote_docker
      - run:
          name: Skip build for docs-only changes
          command: |
            if git diff --name-only $CIRCLE_SHA1 $CIRCLE_BRANCH | grep -qvE 'README.md|docs/'; then
              echo "✅ Code changes detected, proceeding with build..."
            else
              echo -e "\033[33m⚠️ Docs-only change detected, skipping build.\033[0m"
              echo "::notice::Skipping build — only documentation files changed"
              circleci step halt
            fi
      - run:
          name: Build Docker Image
          command: docker build -t fifo-app:latest .
      - run:
          name: Save Docker Image
          command: docker save fifo-app:latest -o fifo-app.tar
      - store_artifacts:
          path: fifo-app.tar

  push-ecr:
    docker:
      - image: cimg/aws:2023.01
    working_directory: ~/repo
    steps:
      - checkout
      - setup_remote_docker
      - run:
          name: Assume Role via OIDC
          command: |
            set -euo pipefail
            echo "$CIRCLE_OIDC_TOKEN_V2" > /tmp/oidc-token

            export AWS_WEB_IDENTITY_TOKEN_FILE=/tmp/oidc-token
            export AWS_ROLE_ARN=$AWS_ROLE_ARN
            export AWS_REGION=${AWS_REGION:-us-west-2}

            echo "🔑 Assuming role: $AWS_ROLE_ARN in region $AWS_REGION"
            aws sts get-caller-identity
      - run:
          name: Configure AWS ECR
          command: |
            ACCOUNT_ID=$(aws sts get-caller-identity --query Account --output text)
            REPO_NAME=fifo-app
            ECR_REGISTRY="${ACCOUNT_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com"

            # Authenticate Docker to ECR
            aws ecr get-login-password --region $AWS_REGION | \
              docker login --username AWS --password-stdin $ECR_REGISTRY

            # Ensure repo exists
            aws ecr describe-repositories \
              --repository-names $REPO_NAME \
              --region $AWS_REGION >/dev/null 2>&1 || \
              aws ecr create-repository \
                --repository-name $REPO_NAME \
                --region $AWS_REGION

            # Build and push image
            docker build -t "${ECR_REGISTRY}/${REPO_NAME}:latest" .
            docker push "${ECR_REGISTRY}/${REPO_NAME}:latest"


workflows:
  version: 2
  build-test-and-push:
    jobs:
      - test
      - build:
          requires:
            - test
      - push-ecr:
          requires:
            - build
